name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Run tests
      run: cargo test --verbose

  build:
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        target: 
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-target-
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools
    
    - name: Build CLI
      run: cargo build --release --target ${{ matrix.target }} --bin prompts-cli
    
    - name: Build API
      run: cargo build --release --target ${{ matrix.target }} --bin prompts-api
    
    - name: Build WebApp
      run: cargo build --release --target ${{ matrix.target }} --bin prompts-webapp
    
    - name: Create artifact directory
      run: mkdir -p artifacts
    
    - name: Copy binaries
      run: |
        cp target/${{ matrix.target }}/release/prompts-cli artifacts/prompts-cli-${{ matrix.target }}
        cp target/${{ matrix.target }}/release/prompts-api artifacts/prompts-api-${{ matrix.target }}
        cp target/${{ matrix.target }}/release/prompts-webapp artifacts/prompts-webapp-${{ matrix.target }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kubellm-binaries-${{ matrix.target }}
        path: artifacts/
        retention-days: 30

  #docker:
  #  runs-on: ubuntu-latest
  #  needs: test
  #  if: github.ref == 'refs/heads/main'
  #
  #  steps:
  #  - uses: actions/checkout@v4
  #
  #  - name: Set up Docker Buildx
  #    uses: docker/setup-buildx-action@v3
  #
  #  - name: Build API Docker image
  #    uses: docker/build-push-action@v5
  #    with:
  #      context: .
  #      file: ./Dockerfile-api
  #      tags: kubellm-api:latest
  #      outputs: type=docker,dest=/tmp/kubellm-api.tar
  #
  #  - name: Build CLI Docker image
  #    uses: docker/build-push-action@v5
  #    with:
  #      context: .
  #      file: ./Dockerfile-cli
  #      tags: kubellm-cli:latest
  #      outputs: type=docker,dest=/tmp/kubellm-cli.tar
  #
  #  - name: Build WebApp Docker image
  #    uses: docker/build-push-action@v5
  #    with:
  #      context: .
  #      file: ./Dockerfile-webapp
  #      tags: kubellm-webapp:latest
  #      outputs: type=docker,dest=/tmp/kubellm-webapp.tar
  #
  #  - name: Upload Docker images
  #    uses: actions/upload-artifact@v4
  #    with:
  #      name: docker-images
  #      path: /tmp/*.tar
  #      retention-days: 30